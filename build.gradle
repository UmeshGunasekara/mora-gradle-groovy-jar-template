/*
 * Created by IntelliJ IDEA.
 * Language: Groovy
 * Property of Umesh Gunasekara
 * @Author: SLMORA
 * @DateTime: 05/24/2022 09:56 PM
 */

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 *
 *
 * This build.gradle comes with basic dependency requirements and create for  mora-gradle-groovy-jar-template Project
 *
 * <blockquote><pre>
 * <br>Version      Date            Editor              Note
 * <br>------------------------------------------------------
 * <br>1.0			05/24/2022		SLMORA              Initial Code
 * <br>1.1          05/24/2022		SLMORA              Get copy from mora-gradle-groovy-template-001-202305220743
 * </pre></blockquote>
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    //Added
    id 'java'
    id 'maven-publish'
//    id 'war'
    id 'groovy'
    id 'idea'
}

group = 'com.slmora.learn'
version = '1.0.1'
description = 'moraGradleGroovyJarTemplate'
//sourceCompatibility = 14
//targetCompatibility = 14

mainClassName ='com.slmora.learn.app.App'

ext{
    createdBy = "$version (Ceylon Code)"
    builtBy = "SLMORA"
    builtJDK = 17
}

//Added
configurations {
//    compileOnly {
//        extendsFrom annotationProcessor
//    }
    myCompile
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
	//Added
	mavenLocal()
//    maven {url 'http://nexus.com'}
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

//    Log4j Logging Dependencies
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'
//    implementation group:'org.apache.logging.log4j',name:'log4j-core',version:'2.19.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.19.0'

//    MyCompile
//    myCompile 'org.apache.logging.log4j:log4j-slf4j-impl:2.19.0'

//    Apache
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'commons-io:commons-io:2.11.0'

//    For Hex Generation
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'org.springframework.security:spring-security-crypto:5.7.3'

//    Json
    implementation 'org.json:json:20220924'
    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

//    lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

//    JSP Servlet
    implementation 'javax.transaction:jta:1.1'
    implementation 'org.slf4j:slf4j-api:2.0.3'
    implementation 'javax.servlet:jstl:1.2'

    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
    compileOnly 'javax.servlet.jsp:jsp-api:2.2'
    compileOnly 'javax:javaee-api:8.0.1'

    // This dependency is used by the application.
//    Elapsed Time
    implementation 'com.google.guava:guava:31.0.1-jre'

//    SQL
//    runtimeOnly 'mysql:mysql-connector-java:8.0.31'
    implementation 'mysql:mysql-connector-java:8.0.31'

//    DB
//    implementation 'org.apache.commons:commons-dbcp2:2.9.0'
    implementation 'commons-dbcp:commons-dbcp:1.4'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'com.mchange:c3p0:0.9.5.5'
    implementation 'org.apache.tomcat:tomcat-jdbc:10.1.0'
    implementation 'org.vibur:vibur-dbcp:25.0'

//    Hibernate
    implementation 'org.hibernate.orm:hibernate-core:6.1.6.Final'
//    implementation 'org.hibernate:hibernate-core:5.6.14.Final'
    implementation 'org.hibernate.orm:hibernate-hikaricp:6.1.6.Final'
//    implementation 'org.hibernate:hibernate-hikaricp:5.6.14.Final'
    implementation 'org.hibernate:hibernate-jcache:6.1.6.Final'
//    implementation 'org.hibernate:hibernate-ehcache:5.6.14.Final'
    implementation 'org.ehcache.modules:ehcache-107:3.10.8'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

//    QR Generation
    implementation 'com.google.zxing:core:3.5.0'
    implementation 'com.google.zxing:javase:3.5.0'

//    Excel
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'

//    Media
//    implementation 'it.sauronsoftware:jave:1.0.2'

//    JUnit Jupiter for testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.1'

//    Mockito
    testImplementation 'org.hamcrest:hamcrest-all:1.3'

//    Mockito
    testImplementation 'org.mockito:mockito-core:4.8.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

//Added
//configurations{
//    provided
//}

application {
    // Define the main class for the application.
    mainClass = 'com.slmora.learn.app.App'
}

//Added
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

//Added
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest{
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Manifest-Version': "${version}",
                'Created-By': "${createdBy}",
                'Built-By': "${builtBy}",
                'Build-Jdk': "${builtJDK}",
                'Main-Class': "${mainClassName}"
    }
    archiveBaseName.set('mora-gradle-groovy-jar-template')
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

//Added
//task fatJar(type: Jar) {
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//
//    manifest {
////        attributes 'Main-Class': "${mainClassName}"
//        attributes 'Implementation-Title': 'Gradle Jar File Example',
//                'Main-Class': "${mainClassName}"
//    }
//    archiveBaseName.set('mora-gradle-groovy-jar-template')
//    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}

//Added
//sourceSets.main.java.srcDir('src/main')
sourceSets {
    main{
        java{
            srcDirs = ['src/main/java', 'src/generated/java']
//            exclude '**/com/slmora/learn/app/Main.java'
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test{
        java{
            srcDirs = ['src/test/java']
//            exclude '**/com/slmora/learn/app/Main.java'
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

//task hello{
//    group 'Custom'
//    description 'Test Hello Task'
//    ext.val1 = 100
//    println "Custom Hello Task Created"
//    doLast {
//        println "Jar Path is D:\\SLMORAWorkSpace\\IntelliJProjects\\slmora-template\\gradle\\mora-gradle-groovy-jar-template-001-202305241352\\app\\build\\libs\\mora-gradle-groovy-jar-template-1.0.1.jar"
//    }
//   doFirst{
//        println "Hello"
//    }
//}

task hello{
    group 'MORA'
    description 'Test Hello Task'

    //Configuration
    ext.val1 = 100
    println "Val1 value is $val1"

    //Execution
    doFirst{ println "First"}
    doFirst{ println "Second"}
    doLast{ println "Third"}
    doLast{ println "Fourth"}

//    doLast{println "$jar.archiveFile.get().asFile.absolutePath"}
//    doLast{println "$jar.archiveFile"}
    doLast{
        def jarPath = jar.archiveFile.get().getAsFile().absolutePath
        println jarPath
    }
//    doLast {
//        def buildDir = project.buildDir
//        def jarFileName = jar.archiveFileName.get()
//        def jarPath = "$buildDir/libs/$jarFileName"
//        println jarPath
//    }
}

task writeHello{
    group 'MORA'
    description 'Test Write Hello Task'

//    4.times{
//        println "Counter print $it"
//    }
//    doLast{
//        if (project.hasProperty("doHello")) {
//            hello2.finalizedBy hello
//        }
//    }
    outputs.file file('hello.txt')
    doLast{
        file('hello.txt').text = "hello"
    }
}

hello.doLast{println "Appending with ."}

task conditionalTask(){
    group 'MORA'
    description 'Test Conditional Task'
    onlyIf {!file("hello.txt").exists()}
    doFirst{
        println "Condition True hello.txt is Not exists"
        file('hello.txt').text = "hello"
    }
}

task runJar(type:Exec, dependsOn:jar){
    group 'MORA'
    description 'Run the generated jar, this task depends on the jar task'
    def buildDir = project.buildDir
    def jarFileName = jar.archiveFileName.get()
    def jarPath = "$buildDir/libs/$jarFileName"
    executable 'java'
    args '-jar', "$jarPath"
}

task runExecutableJar(type: JavaExec) {
    group 'MORA'
    // Executable jars can have only _one_ jar on the classpath.
    classpath = files(tasks.jar)

    // 'main' does not need to be specified

    // arguments to pass to the application
//    args 'appArg1'
}

//task runApp(type: JavaExec) {
//    classpath = sourceSets.main.runtimeClasspath
//
//    mainClass = 'package.Main'
//
//    // arguments to pass to the application
//    args 'appArg1'
//}

task morarun(type: JavaExec, dependsOn: classes){
    group 'MORA'
    description 'Run the project without executing jar'
    main "$mainClassName"
    classpath sourceSets.main.runtimeClasspath
    args ''
}